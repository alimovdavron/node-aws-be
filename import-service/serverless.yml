service: import-service

frameworkVersion: '2'

useDotenv: true
provider:
  name: aws
  runtime: nodejs14.x
  region: ${env:REGION}
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    SQS_URL:
      Ref: CreateProductQueue

  lambdaHashingVersion: 20201221
  iam:
    role:
      name: import-service-role
      statements:
        - Effect: Allow
          Action: s3:*
          Resource:
            - arn:aws:s3:::${env:S3_BUCKET_NAME}
            - arn:aws:s3:::${env:S3_BUCKET_NAME}/*
        - Effect: Allow
          Action: sqs:*
          Resource:
            - Fn::GetAtt:
                - CreateProductQueue
                - Arn

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  s3BucketName: ${env:S3_BUCKET_NAME}

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin

functions:
  importProductsFile:
    handler: src/functions/importProductsFile/handler.main
    events:
      - http:
          method: get
          cors: true
          path: /import
          authorizer:
            arn: ${cf:authorization-service-dev.basicAuthorizerArn}
            identitySource: method.request.header.Authorization

  importFileParser:
    handler: src/functions/importFileParser/handler.main
    events:
      - s3:
          bucket: ${env:S3_BUCKET_NAME}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
            - suffix: .csv
          existing: true

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    CSVBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3BucketName}
        AccessControl: Private
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - PUT
                - POST
                - GET
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              MaxAge: 3600

    CreateProductQueueDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${env:DLQ_NAME}

    CreateProductQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${env:SQS_NAME}
        RedrivePolicy:
          maxReceiveCount: 2
          deadLetterTargetArn:
            Fn::GetAtt:
              - CreateProductQueueDLQ
              - Arn

  Outputs:
    CSVBucketOutput:
      Value: !Ref CSVBucket
    createProductQueue:
      Value: !Ref CreateProductQueue
      Export:
        Name: createProductQueue
    createProductQueueArn:
      Value:
         Fn::GetAtt:
            - CreateProductQueue
            - Arn
